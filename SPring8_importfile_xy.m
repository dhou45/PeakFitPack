function tested1 = importfile1(filename, startRow, endRow)
%IMPORTFILE1 Import numeric data from a text file as a matrix.
%   UNTITLED = IMPORTFILE1(FILENAME) Reads data from text file FILENAME for
%   the default selection.
%
%   UNTITLED = IMPORTFILE1(FILENAME, STARTROW, ENDROW) Reads data from rows
%   STARTROW through ENDROW of text file FILENAME.
%
% Example:
%   Untitled = importfile1('00000.gr', 7, 8006);
%
%    See also TEXTSCAN.

% Auto-generated by MATLAB on 2018/06/16 15:59:00

%% Initialize variables.
delimiter = ' ';

% if nargin<=2
%     startRow = 36;
%     endRow = 800;
% end

% for all 800 data points
if nargin<=2
    startRow = 1;
    endRow = 800;
end

%% Format for each line of text:
%   column1: double (%f)
%	column2: double (%f)
% For more information, see the TEXTSCAN documentation.
formatSpec = '%f%f%*s%[^\n\r]';

%% Open the text file.
fileID = fopen(filename,'r');

%% Read columns of data according to the format.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, endRow(1)-startRow(1)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(1)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
for block=2:length(startRow)
    frewind(fileID);
    dataArrayBlock = textscan(fileID, formatSpec, endRow(block)-startRow(block)+1, 'Delimiter', delimiter, 'MultipleDelimsAsOne', true, 'EmptyValue' ,NaN,'HeaderLines', startRow(block)-1, 'ReturnOnError', false, 'EndOfLine', '\r\n');
    for col=1:length(dataArray)
        dataArray{col} = [dataArray{col};dataArrayBlock{col}];
    end
end

%% Close the text file.
fclose(fileID);

%% Post processing for unimportable data.
% No unimportable data rules were applied during the import, so no post
% processing code is included. To generate code which works for
% unimportable data, select unimportable cells in a file and regenerate the
% script.

%% Create output variable
tested1 = [dataArray{1:end-1}];

%no extension
% [filepath,name,ext] = fileparts(filename);
% dlmwrite(strcat(name,'.xy'),tested1,'\t');


%Normalization to 0-1
% Z1 =tested1(:,2);
% normZ1 = Z1 - min(Z1(:));
% normZ1 = normZ1 ./ max(normZ1(:));
% tested1(:,2)=normZ1;

% dlmwrite(strcat('Norm_',filename),tested1,'\t');

% add baseline zero points
addon_x=[1.95:0.01:1.99]';
addon_y=zeros(max(size(addon_x)),1);
addon=[addon_x, addon_y];
tested1=[addon; tested1];

tested1(:,2)=tested1(:,2)+2;

dlmwrite(strcat('offset_addon_',filename),tested1,'\t');


%offset +2.5
% tested1(:,2)=tested1(:,2)+4;

% dlmwrite(strcat('Norm_',filename),tested1,'\t');
% tested1(:,2)=tested1(:,2)-4;
% %substract baseline
% % tested1(:,2)=tested1(:,2)+0.982*tested1(:,1)
% %dlmwrite(strcat('nobase_',name,'.xy'),tested1,'\t');


% %RDF
% tested1(:,2)=(tested1(:,2)+0.982*tested1(:,1)).*tested1(:,1);
% dlmwrite(strcat('Rr_',name,'.xy'),tested1,'\t');


